/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package da_qlnhatro;

import Entities.Area;
import Entities.Room;
import Entities.RoomType;
import Services.AreaServices;
import Services.RoomServices;
import Services.RoomTypeServices;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vuhuynh
 */
public class frm_Room extends javax.swing.JFrame {
    //khai báo roomServices để đển thêm, xóa, sửa cơ sở dữ liệu.
    RoomServices roomServices = new RoomServices();
    //khai báo roomTypeServices để đển thêm, xóa, sửa cơ sở dữ liệu.
    RoomTypeServices roomTypeServices = new RoomTypeServices();
    //khai báo areaServices để đển hiển thị khu vực trong cơ sở dữ liệu
    AreaServices areaServices = new AreaServices();
    //khai báo biến chứa danh sách phòng trọ
    ArrayList<Room> dsRoom = new ArrayList<Room>();
    //khai báo biến chứa danh sách loại phòng 
    ArrayList<RoomType> dsRoomType = new ArrayList<RoomType>();
    //khai báo biến chứa danh sách khu vực
    ArrayList<Area> dsArea = new ArrayList<Area>();
    //khai báo biến phòng được chọn
    Room selectedRoom;
    //khai báo biến loại phòng được chọn
    RoomType selectedRoomType;
    
    /**
     * Creates new form frm_Room
     */
    public frm_Room() {
        initComponents();
        //load combobox khu vực
        LoadArea();
        //load combobox loại phòng
        LoadRoomType();
        //load combobox trạng thái
        LoadTrangThai();
        //load bảng danh sách phòng trọ
        LoadGridRoom();
        //load bảng loại phòng trọ
        LoadGridRoomType();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMaPhong = new javax.swing.JTextField();
        cbxKhuVuc = new javax.swing.JComboBox<>();
        cbxLoaiPhong = new javax.swing.JComboBox<>();
        cbxTrangThai = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        btnThemPhong = new javax.swing.JButton();
        btnSuaPhong = new javax.swing.JButton();
        btnXoaPhong = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dgvPhongTro = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtMaloai = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        btnThemLoai = new javax.swing.JButton();
        btnSuaLoai = new javax.swing.JButton();
        btnXoaLoai = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        dgvLoaiPhong = new javax.swing.JTable();
        txtTenLoai = new javax.swing.JTextField();
        txtDonGia = new javax.swing.JTextField();
        spnSucchua = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý phòng Trọ");
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Quản lý Phòng Trọ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(289, 289, 289))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Mã phòng");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Khu vực");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Loại phòng");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Trạng thái");

        txtMaPhong.setEditable(false);
        txtMaPhong.setBackground(new java.awt.Color(204, 204, 255));
        txtMaPhong.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cbxKhuVuc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cbxLoaiPhong.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cbxTrangThai.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Danh sách phòng trọ");

        btnThemPhong.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnThemPhong.setText("Thêm Mới");
        btnThemPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemPhongActionPerformed(evt);
            }
        });

        btnSuaPhong.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSuaPhong.setText("Cập Nhật");
        btnSuaPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaPhongActionPerformed(evt);
            }
        });

        btnXoaPhong.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnXoaPhong.setText("Xóa");
        btnXoaPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaPhongActionPerformed(evt);
            }
        });

        dgvPhongTro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã phòng", "Khu vực", "Loại Phòng", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(dgvPhongTro);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(334, 334, 334))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMaPhong)
                            .addComponent(cbxKhuVuc, 0, 154, Short.MAX_VALUE)
                            .addComponent(cbxLoaiPhong, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbxTrangThai, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnThemPhong)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSuaPhong)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnXoaPhong)))
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtMaPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cbxKhuVuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cbxLoaiPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cbxTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnThemPhong)
                            .addComponent(btnSuaPhong)
                            .addComponent(btnXoaPhong)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Mã loại");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Tên loại");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Đơn giá");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Sức chứa");

        txtMaloai.setEditable(false);
        txtMaloai.setBackground(new java.awt.Color(204, 204, 255));
        txtMaloai.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Loại phòng");

        btnThemLoai.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnThemLoai.setText("Thêm Mới");
        btnThemLoai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemLoaiActionPerformed(evt);
            }
        });

        btnSuaLoai.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSuaLoai.setText("Cập Nhật");
        btnSuaLoai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaLoaiActionPerformed(evt);
            }
        });

        btnXoaLoai.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnXoaLoai.setText("Xóa");
        btnXoaLoai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaLoaiActionPerformed(evt);
            }
        });

        dgvLoaiPhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Loại", "Tên Loại", "Đơn Giá", "Sức Chứa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(dgvLoaiPhong);

        txtTenLoai.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtDonGia.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        spnSucchua.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtMaloai, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTenLoai, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnSucchua, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnThemLoai)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSuaLoai)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnXoaLoai)))
                .addGap(54, 54, 54)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16)
                .addGap(355, 355, 355))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtMaloai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(txtTenLoai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(spnSucchua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnThemLoai)
                            .addComponent(btnSuaLoai)
                            .addComponent(btnXoaLoai))))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * xử lý sự kiện nút thêm phòng trọ
     * @param evt 
     */
    private void btnThemPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemPhongActionPerformed
        //khai báo biến chứa khu vực được chọn của combobox
        Area khuvuc = (Area) cbxKhuVuc.getSelectedItem();
        //khai báo biến loại phòng trọ được chọn của combobox
        RoomType loaiphong = (RoomType) cbxLoaiPhong.getSelectedItem();
        //khái báo biến trạng thái chứa trạng thái được chọn
        boolean trangthai;
        //nếu vị trí chọn = 0
        if(cbxTrangThai.getSelectedIndex() == 0){
            //gán biến = false
            trangthai = false;
        }
        else{
            //gán biến = true
            trangthai = true;
        }
        //khai báo biến để thực thi SQL và xác định thêm thành công hay thất bại
        int rowEffected = roomServices.AddNewRecord(khuvuc.getMAKV(), loaiphong.getMALOAI(), trangthai);
        //nếu biến lớn hơn 0 thì thành công
        if(rowEffected > 0){
            //load lại bảng phòng trọ
            LoadGridRoom();
            txtMaPhong.setText("");
            //hiện thông báo thêm thành công
            JOptionPane.showMessageDialog(null, "Thêm thành công!");
        }
        else
            //hiện thông báo nhập lại thông tin
            JOptionPane.showMessageDialog(null, "Thêm Thất bại");
    }//GEN-LAST:event_btnThemPhongActionPerformed
    /**
     * xử lý sự kiện sửa phòng trọ
     * @param evt 
     */
    private void btnSuaPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaPhongActionPerformed
        if(!txtMaPhong.getText().isEmpty()){
            //khai báo biến chứa mã phòng trọ
            int maphong = Integer.parseInt(txtMaPhong.getText().trim());
            //khai báo biến chứa khu vực
            Area khuvuc = (Area) cbxKhuVuc.getSelectedItem();
            //khai báo biến chứa loại phòng
            RoomType loaiphong = (RoomType) cbxLoaiPhong.getSelectedItem();
            //khái báo biến trạng thái chứa trạng thái được chọn
            boolean trangthai;
            //nếu vị trí chọn = 0
            if(cbxTrangThai.getSelectedIndex() == 0){
                //gán biến = false
                trangthai = false;
            }
            else{
                //gán biến = true
                trangthai = true;
            }
            //khai báo biến để thực thi SQL và xác định sửa thành công hay thất bại
            int rowEffected = roomServices.UpdateRecord(maphong, khuvuc.getMAKV(), loaiphong.getMALOAI(), trangthai);
            //nếu biến lớn hơn 0 thì thành công
            if(rowEffected > 0){
                //load lại bảng phòng trọ
                LoadGridRoom();
                txtMaPhong.setText("");
                //hiện thông báo sửa thành công
                JOptionPane.showMessageDialog(null, "Sửa thành công!");
            }
            else
                //hiện thông báo sửa thất bại
                JOptionPane.showMessageDialog(null, "Sửa Thất bại");
        }
        else{
            JOptionPane.showMessageDialog(null, "xin chọn phòng cần sửa");
        }
    }//GEN-LAST:event_btnSuaPhongActionPerformed
    /**
     * xử lý sự kiện xóa phòng trọ
     * @param evt 
     */
    private void btnXoaPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaPhongActionPerformed
        if(!txtMaPhong.getText().isEmpty()){
            //khai báo biến chứa mã phòng trọ
            int maphong = Integer.parseInt(txtMaPhong.getText().trim());
            // khai báo biến hiện thông báo xác nhận có muốn xóa hay không
            int input = JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa?", "Confirmation...",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            // 0=yes, 1=no, 2=cancel
            //nếu xác nhận có 
            if(input == 0)
            {
                //khai báo biến thực thi lệnh SQL và xác nhận xóa thành công hay thất bại
                int rowEffected = roomServices.DeleteRecord(maphong);
                //nếu biến lớn hơn 0 thì thành công
                if(rowEffected > 0){
                    //load lại bảng phòng trọ
                    LoadGridRoom();
                    txtMaPhong.setText("");
                    //hiện thông báo xóa thành công
                    JOptionPane.showMessageDialog(null, "Xóa thành công!");
                }
                else
                    //hiện thông báo xóa thất bại
                    JOptionPane.showMessageDialog(null, "Xóa thất bại");
            }
            }
        else{
            JOptionPane.showMessageDialog(null, "xin chọn phòng cần xóa");
        }
    }//GEN-LAST:event_btnXoaPhongActionPerformed
    /**
     * xử lý sự kiện thêm loại phòng
     * @param evt 
     */
    private void btnThemLoaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemLoaiActionPerformed
        //khai báo biến chứa tên loại
        String tenloai = txtTenLoai.getText().trim();
        //khai báo biến chứa đơn giá
        int dongia = Integer.valueOf(txtDonGia.getText().trim());
        //khai báo biến chứa sức chứa
        int succhua = (int) spnSucchua.getValue();
        //khai báo biến để thực thi SQL và xác định thêm thành công hay thất bại
        int rowEffected = roomTypeServices.AddNewRecord(tenloai, dongia, succhua);
        //nếu biến lớn hơn 0 thì thành công
        if(rowEffected > 0){
            //load lại bảng loại phòng
            LoadGridRoomType();
            //load lại combobox khu vực
            LoadArea();
            //load lại combobox loại phòng
            LoadRoomType();
            txtMaloai.setText("");
            txtTenLoai.setText("");
            txtDonGia.setText("");
            spnSucchua.setValue(0);
            //hiển thị thông báo thêm thành công
            JOptionPane.showMessageDialog(null, "Thêm thành công!");
        }
        else
            //hiển thị thông báo thêm thất bại
            JOptionPane.showMessageDialog(null, "Thêm Thất bại");
    }//GEN-LAST:event_btnThemLoaiActionPerformed

    private void btnSuaLoaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaLoaiActionPerformed
        if(!txtMaloai.getText().isEmpty()){
            //khai báo biến chứa mã loại
            int maloai = Integer.valueOf(txtMaloai.getText().trim());
            //khai báo biến chứa tên loại
            String tenloai = txtTenLoai.getText().trim();
            //khai báo biến chứa đơn giá
            int dongia = Integer.valueOf(txtDonGia.getText().trim());
            //khai báo biến chứa sức chứa
            int succhua = (int) spnSucchua.getValue();
            //khai báo biến để thực thi SQL và xác định thêm thành công hay thất bại
            int rowEffected = roomTypeServices.UpdateRecord(maloai, tenloai, dongia, succhua);
            //nếu biến lớn hơn 0 thì thành công
            if(rowEffected > 0){
                //load lại bảng loại phòng
                LoadGridRoomType();
                //load lại combobox khu vực
                LoadArea();
                //load lại combobox loại phòng
                LoadRoomType();
                txtMaloai.setText("");
                txtTenLoai.setText("");
                txtDonGia.setText("");
                spnSucchua.setValue(0);
                //hiển thị thông báo sửa thành công
                JOptionPane.showMessageDialog(null, "Sửa thành công!");
            }
            else
                //hiển thị thông báo sửa thất bại
                JOptionPane.showMessageDialog(null, "Sửa Thất bại");
        }
        else{
            JOptionPane.showMessageDialog(null, "Xin chọn loại phòng cần sửa");
        }
    }//GEN-LAST:event_btnSuaLoaiActionPerformed
    /**
     * xử lý sự kiện xóa loại phòng
     * @param evt 
     */
    private void btnXoaLoaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaLoaiActionPerformed
        if(!txtMaloai.getText().isEmpty()){
            //khai báo biến chứa mã loại
            int maloai = Integer.valueOf(txtMaloai.getText().trim());
            // khai báo biến hiện thông báo xác nhận có muốn xóa hay không
            int input = JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa?", "Confirmation...",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            // 0=yes, 1=no, 2=cancel
            if(input == 0)
            {
                //khai báo biến thực thi lệnh SQL và xác nhận xóa thành công hay thất bại
                int rowEffected = roomTypeServices.DeleteRecord(maloai);
                //nếu biến lớn hơn 0 thì thành công
                if(rowEffected > 0){
                    //load lại bảng danh sách khách hàng
                    LoadGridRoomType();
                    //load lại combobox khu vực
                    LoadArea();
                    //load lại combobox loại phòng
                    LoadRoomType();
                    txtMaloai.setText("");
                    txtTenLoai.setText("");
                    txtDonGia.setText("");
                    spnSucchua.setValue(0);
                    //hiện thông báo xóa thành công
                    JOptionPane.showMessageDialog(null, "Xóa thành công!");
                }
                else
                //hiện thông báo xóa thất bại
                JOptionPane.showMessageDialog(null, "Xóa thất bại");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Xin chọn loại phòng cần xóa");
        }
    }//GEN-LAST:event_btnXoaLoaiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_Room().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSuaLoai;
    private javax.swing.JButton btnSuaPhong;
    private javax.swing.JButton btnThemLoai;
    private javax.swing.JButton btnThemPhong;
    private javax.swing.JButton btnXoaLoai;
    private javax.swing.JButton btnXoaPhong;
    private javax.swing.JComboBox<Area> cbxKhuVuc;
    private javax.swing.JComboBox<RoomType> cbxLoaiPhong;
    private javax.swing.JComboBox cbxTrangThai;
    private javax.swing.JTable dgvLoaiPhong;
    private javax.swing.JTable dgvPhongTro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner spnSucchua;
    private javax.swing.JTextField txtDonGia;
    private javax.swing.JTextField txtMaPhong;
    private javax.swing.JTextField txtMaloai;
    private javax.swing.JTextField txtTenLoai;
    // End of variables declaration//GEN-END:variables
    
    /**
     * load bảng danh sách phòng trọ
     */
    private void LoadGridRoom() {
        //khai báo biến lấy model của bảng phòng trọ
        DefaultTableModel model = (DefaultTableModel) dgvPhongTro.getModel();
        //xóa bảng
        model.setRowCount(0);
        //khai báo biến list chứa danh sách tất cả phòng trọ từ cơ sở dữ liệu
        ArrayList<Room> list = roomServices.getAllRecords();
        //gán danh sách vừa lấy được cho biến dsRoom
        dsRoom = list;
        //khai báo mảng đối tượng chứa thông tin để mỗi dòng
        Object[] row = new Object[4];
        //vòng lặp chạy từ đầu đến hết danh sách
        for(int i = 0; i< list.size(); i++){
            //vị trí 0 hiện mã phòng
            row[0] = list.get(i).getMAPHONG();
            //vị trí 1 hiện tên khu vực
            row[1] = findArea(list.get(i).getMAKV(), dsArea).getTENKV();
            //vị trí 2 hiện tên loại phòng
            row[2] = findRoomType(list.get(i).getMALOAI(), dsRoomType).getTENLOAI();
            //đặt điều kiện để hiển thị vị trí 3
            if(list.get(i).isTRANGTHAI() == true)//nếu trạng thái = true
            {
                //thỏa điều kiện
                row[3] = "đã thuê";
            }
            else{
                //không thỏa điều kiện
                row[3] = "Trống";
            }       
            //thêm 1 dòng vào bảng
            model.addRow(row);
        }    
        //khai báo phương thức chọn trên bảng
        ListSelectionModel cellSelectionModel = dgvPhongTro.getSelectionModel();
        //khai báo chọn đơn lẻ
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //xử lý sự kiện chọn
        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                //xử lý sự kiện thay đổi dòng chọn
                roomGridSelectedChanged();
            }

            
        });
    }
    private void roomGridSelectedChanged() {
        //String selectedData = null;
        
        //biến chứa mã phòng trọ vừa chọn
        int selectedID = 0;
        //Trả về một mảng các số nguyên, mỗi một số nguyên chính là chỉ số của một hàng đang được chọn trong bảng.
        int[] selectedRows = dgvPhongTro.getSelectedRows();
        //Trả về một mảng các số nguyên, mỗi số nguyên là một chỉ số của một cột đang được chọn trong bảng
        int[] selectedColumns = dgvPhongTro.getSelectedColumns();
        //Trả về một số nguyên, số nguyên này là chỉ số nhỏ nhất của một hàng trong tập hợp các hàng đang được chọn của bảng.
        int selectedRow = dgvPhongTro.getSelectedRow();
        //Trả về một số nguyên là chỉ số nhỏ nhất của một cột trong số các cột đang được chọn của bảng.
        int selectedColumn = dgvPhongTro.getSelectedColumn();
        //nếu số dòng được chọn lớn hơn hoặc bằng 0 và nếu số cột chọn lớn hơn hoặc bằng 0
        if(selectedRow >=0 && selectedColumn >=0){
            
            //selectedData = String.valueOf(dgvPhongTro.getValueAt(selectedRow, selectedColumn));
            //gán biến bằng dòng được chọn cột 0 lấy mã phòng
            selectedID = (int) dgvPhongTro.getValueAt(selectedRow, 0);
            //gán đối tượng được chọn cho biến selectedRoom để xét điều kiện
            selectedRoom = findRoom(selectedID, dsRoom);
            //nếu biến mã phòng trọ khác 0
            if(selectedID != 0){
                //chạy phương thức hiển thị thông tin dòng được chọn lên các ô textfield và combobox
                ShowRoomDetail(selectedID,
                       (String) dgvPhongTro.getValueAt(selectedRow, 1),
                       (String) dgvPhongTro.getValueAt(selectedRow, 2),
                       (String) dgvPhongTro.getValueAt(selectedRow, 3));
            }
        }
    }
    /**
     * Đây là phương thức hiển thị thông tin dòng được chọn lên các ô textfield và combobox phòng trọ
     * @param maphong
     * @param tenkv
     * @param tenloai
     * @param trangthai 
     */
    private void ShowRoomDetail(int maphong, String tenkv, String tenloai, String trangthai) {
        //đặt điều kiện nếu nếu đã chọn dòng trong bảng
        if(selectedRoom != null){
            //gán mã phòng trọ lên textfield
            txtMaPhong.setText("" + maphong);
            //hiển thị tên khu vực của dòng vừa chọn
            cbxKhuVuc.setSelectedItem(findArea(selectedRoom.getMAKV(), dsArea));
            //hiển thị tên loại phòng của dòng vừa chọn
            cbxLoaiPhong.setSelectedItem(findRoomType(selectedRoom.getMALOAI(), dsRoomType));
            //xét điều kiện trạng thái của dòng vừa chọn
            if(selectedRoom.isTRANGTHAI() == false){
                //thỏa điều kiện
                cbxTrangThai.setSelectedIndex(0);
            }
            else{
                //không thỏa điều kiện
                cbxTrangThai.setSelectedIndex(1);
            }
        }
    }
    /**
     * phương thức tìm một phòng trọ với mã phòng và danh sách phòng được truyền vào
     * @param maphong
     * @param rooms
     * @return trả về đối tượng phòng trọ tìm được
     */
    private Room findRoom(int maphong, ArrayList<Room> rooms){
        //với từng đối tượng trong danh sách
        for(Room item : rooms){
            //nếu thỏa điều kiện bằng mã phòng
            if (item.getMAPHONG() == maphong) {
                //trả về đối tượng thỏa điều kiện
                return item;
            }
        }
        return null;
    }
    /**
     * phương thức tìm một khu vực với mã khu vực và danh sách khu vực được truyền vào
     * @param makv
     * @param areas
     * @return trả về đối tượng khu vực tìm được
     */
    private Area findArea(int makv, ArrayList<Area> areas){
        //với từng đối tượng trong danh sách
        for(Area item : areas){
            //nếu thỏa điều kiện bằng mã phòng
            if(item.getMAKV() == makv){
                //trả về đối tượng thỏa điều kiện
                return item;
            }
        }
        return null;      
    }
    /**
     * phương thức tìm một phòng trọ với mã loại phòng và danh sách loại phòng được truyền vào
     * @param maloai
     * @param roomTypes
     * @return trả về đối tượng loại phòng tìm được
     */
    private RoomType findRoomType(int maloai, ArrayList<RoomType> roomTypes){
        for(RoomType item : roomTypes){
            if(item.getMALOAI() == maloai){
                return item;
            }
        }
        return null;
    }
    /**
     * load combobox khu vực
     */
    private void LoadArea() {
        //xóa combobox
        cbxKhuVuc.removeAllItems();
        //lấy tất cả danh sách khu vực trong cơ sỡ dữ liệu
        dsArea = areaServices.getAllRecords();
        //với mỗi đối tượng trong danh sách
        for(Area item : dsArea){
            //thêm vào combox
            cbxKhuVuc.addItem(item);
        }
        //kiểu hiện thị combobox
        cbxKhuVuc.setRenderer(new DefaultListCellRenderer(){
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);               
                if(value instanceof Area){
                    Area item = (Area) value;
                    //hiển thị tên khu vực
                    setText(item.getTENKV());
                }
                return this;
            }
            
        });
    }
    /**
     * load combobox loại phòng
     */
    private void LoadRoomType() {
        //xóa combobox
        cbxLoaiPhong.removeAllItems();
        //lấy tất cả danh sách loại phòng trong cơ sỡ dữ liệu
        dsRoomType = roomTypeServices.getAllRecords();
        //với mỗi đối tượng trong danh sách
        for(RoomType item : dsRoomType){
            //thêm vào combox
            cbxLoaiPhong.addItem(item);
        }
        //kiểu hiện thị combobox
        cbxLoaiPhong.setRenderer(new DefaultListCellRenderer(){
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if(value instanceof RoomType){
                    RoomType item = (RoomType) value;
                    //hiển thị tên loại phòng
                    setText(item.getTENLOAI());
                }
                return this;
            }
            
        });
    }
    /**
     * load combobox Trạng thái
     */
    private void LoadTrangThai() {
        //xóa combobox
        cbxTrangThai.removeAllItems();
        //khai báo model combobox
        DefaultComboBoxModel status = (DefaultComboBoxModel) cbxTrangThai.getModel();
        //thêm phần tử vào model 
        status.addElement("Trống");
        status.addElement("Đã thuê");
    }
    /**
     * load bảng danh sách loại phòng trọ
     */
    private void LoadGridRoomType() {
        //khai báo biến lấy model của bảng
        DefaultTableModel model = (DefaultTableModel) dgvLoaiPhong.getModel();
        //xóa bảng
        model.setRowCount(0);
        //khai báo biến list chứa danh sách tất cả loại phòng từ cơ sở dữ liệu
        ArrayList<RoomType> list = roomTypeServices.getAllRecords();
        //gán danh sách vừa lấy được cho biến dsRoom
        dsRoomType = list;
        //khai báo mảng đối tượng chứa thông tin để mỗi dòng
        Object[] row = new Object[4];
        //vòng lặp chạy từ đầu đến hết danh sách
        for (int i = 0; i < list.size(); i++) {
            //vị trí 0 hiện mã loại
            row[0] = list.get(i).getMALOAI();
            //vị trí 1 hiện tên loại
            row[1] = list.get(i).getTENLOAI();
            //vị trí 2 hiện đơn giá
            row[2] = list.get(i).getDONGIA();
            //vị trí 3 hiện sức chứa
            row[3] = list.get(i).getSUCCHUA();
            //thêm 1 dòng vào bảng
            model.addRow(row);
            
        }
        //khai báo phương thức chọn trên bảng
        ListSelectionModel cellSelectionModel = dgvLoaiPhong.getSelectionModel();
        //khai báo chọn đơn lẻ
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //xử lý sự kiện chọn
        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                //xử lý sự kiện thay đổi dòng chọn
                roomTypeGridSelectedChanged();
            }
  
        });
    }
    /**
     * xử lý sự kiện thay đổi dòng chọn bảng loại phòng
     */
     private void roomTypeGridSelectedChanged() {
//        String selectedData = null;
        //biến chứa mã loại phòng đã chọn
        int selectedID = 0;
        //Trả về một mảng các số nguyên, mỗi một số nguyên chính là chỉ số của một hàng đang được chọn trong bảng.
        int[] selectedRows = dgvLoaiPhong.getSelectedRows();
        //Trả về một mảng các số nguyên, mỗi số nguyên là một chỉ số của một cột đang được chọn trong bảng
        int[] selectedColumns = dgvLoaiPhong.getSelectedColumns();
        //Trả về một số nguyên, số nguyên này là chỉ số nhỏ nhất của một hàng trong tập hợp các hàng đang được chọn của bảng.
        int selectedRow = dgvLoaiPhong.getSelectedRow();
        //Trả về một số nguyên là chỉ số nhỏ nhất của một cột trong số các cột đang được chọn của bảng.
        int selectedColumn = dgvLoaiPhong.getSelectedColumn();
        //nếu số dòng được chọn lớn hơn hoặc bằng 0 và nếu số cột chọn lớn hơn hoặc bằng 0
        if(selectedRow >=0 && selectedColumn >=0){
//            selectedData = String.valueOf(dgvLoaiPhong.getValueAt(selectedRow, selectedColumn));
            //gán biến bằng dòng và cột đầu tiên được chọn lấy mã loại
            selectedID = (int) dgvLoaiPhong.getValueAt(selectedRow, 0);
            //gán đối tượng được chọn cho biến selectedRoomType để xét điều kiện
            selectedRoomType = findRoomType(selectedID, dsRoomType);
            //nếu biến mã loại khác 0
            if(selectedID != 0){
                //chạy phương thức hiển thị thông tin dòng được chọn lên các ô textfield và spinner
                ShowRoomTypeDetail(selectedID,
                       (String) dgvLoaiPhong.getValueAt(selectedRow, 1),
                       (int) dgvLoaiPhong.getValueAt(selectedRow, 2),
                       (int) dgvLoaiPhong.getValueAt(selectedRow, 3));
            }
        }
    }
    /**
     * Đây là phương thức hiển thị thông tin dòng được chọn lên các ô textfield và spinner loại phòng
     * @param makh
     * @param maloai
     * @param tenloai
     * @param dongia
     * @param succhua 
     */
    private void ShowRoomTypeDetail(int maloai, String tenloai, int dongia, int succhua) {
        //xét điều kiện loại phòng đã chọn
        if(selectedRoomType != null){ 
            //gán mã loại lên textfield
            txtMaloai.setText(""+maloai);
            //gán tên loại lên textfield
            txtTenLoai.setText(tenloai);
            //gán đơn giá lên textfield
            txtDonGia.setText(""+dongia);
            //gán giá trị spinner
            spnSucchua.setValue(succhua);
        }
    }
    
}
